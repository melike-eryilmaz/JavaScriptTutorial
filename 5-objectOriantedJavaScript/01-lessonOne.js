/**
 * Primitive data types
 * Boolean
    * Null :DeÄŸiÅŸkenin bir referansa atandÄ±ÄŸÄ±nÄ± fakat referansÄ±n doÄŸru olmadÄ±gÄ±nÄ± belirtir.
    * Undefined:DeÄŸiÅŸkenin bir referansa atanmadÄ±ÄŸÄ±nÄ± belirtir.
    * Number
    * String:Bir karakter grubudur.
    * Symbol -ecmascript 6
    * Object
 */
 /**String prototype larÄ± bulunur.Stringler '' ve "" iÃ§ine tanÄ±mlanabilir. */
 textString = 'Javascript';
 /**anchor() stringi bir anchor a Ã§evirmemizi saÄŸlar.bink() ,big(),bold() gibi fonksiyonlarda vardÄ±r .Fakat bunlar deprecated yani kullanÄ±mdan kalkacaktÄ±r. */
 textString.anchor();
 /**charAt() o indisteki karakteri verir. */
 textString.charAt(0);
 textString.charAt(4);
 /**charCodeAt() o indisteki karakterin kodunu verir. */
 textString.charCodeAt(2);

 /**fromCharCode() verilen karakter koduna sahip karakteri verir. */
 String.fromCharCode(83);

 /**url lerde gÃ¶rdÃ¼ÄŸÃ¼mÃ¼z %20 ox20 ye yani boÅŸluk karakterine denk gelir. */
 /** Emojiler birden fazla karakterden oluÅŸtuÄŸu ve utf-8 karakterlerde oldugu iÃ§in charAt() kullanÄ±mÄ±nda '?' Ã§Ä±kar.
  * Bu yÃ¼zden charAt() yerine charCodeAt(0) ile emojinin karakterinin kodu Ã¶ÄŸrenilebilir.
  * codePointAt() ilede emojinin tÃ¼m karakterlerinin yani kendisinin kodu Ã¶ÄŸrenilebilir.
 */
/**Emoji penceresi windowsta windows tuÅŸu +. ile aÃ§Ä±lÄ±r. */
 'ğŸ˜‚'.charAt(0);
 'ğŸ˜‚'.charCodeAt(0);
 'ğŸ˜‚'.codePointAt(0);
 String.fromCodePoint(128514);//code pointden emojiye bu ÅŸekilde ulaÅŸÄ±labilir.


/**String concatination 
 * concat() iki stringi birleÅŸtirmemizi saÄŸlar.
 * + ile de string birleÅŸtirme yapÄ±lÄ±r.
 * 
*/
'Javascript'.concat(' Ã§ok gÃ¼zel');
console.log('Javascript'+' Ã§ok gÃ¼zel');

/** endsWith() string ifadenin verilen bir string ifade ile bitip bitmediÄŸini belirtir.true ya da false dÃ¶ner.*/
'JavaScript'.endsWith('Script');

/**includes() string ifade iÃ§erisinde verilen string ifade varmÄ±? ÅŸeklinde bakar.EÄŸer iÃ§eriyorsa true dÃ¶ner. */
'JavaScript'.includes('Script');
/**indexOf() string ifade iÃ§erisindeki verilen string ifade hangi indisten baÅŸlÄ±yor verir.
 * Ä°lk buldugu yerin indexini verir.
 * HiÃ§ geÃ§miyorsa -1 dÃ¶ner.
 */
'JavaScript'.indexOf('Script');

if('JavaScript'.indexOf('Script') > -1){}//includes() ile aynÄ± ÅŸekilde Ã§alÄ±ÅŸÄ±r.

/** String ifade iÃ§erisinde verilen stringi arar ve en son geÃ§tiÄŸi yerin indexini verir. */
'JavaScript'.lastIndexOf('Script');

/**localeCompare() iki strigin bir dilde birbirinde Ã¶nce veya sonra geldiÄŸini bulmak iÃ§in kullanÄ±lÄ±r.
 * -1 Ã¶nce ,1 sonra geldiÄŸini belirtir.
 * localeCompare sayesinde alfabetik olarak doÄŸru sÄ±ralama yapmamÄ±zÄ± saÄŸlar.
 */

 'ÄŸ'.localeCompare('z','tr');

 'ÄŸ'.charCodeAt(0);
 'z'.charCodeAt(0);


 /**match() regex alÄ±r.ve bulur. */

 'JavaScript'.match(/Script/);

 /**padEnd() string uzunluÄŸunu verilen uzunluÄŸa sabitler.Sona BoÅŸluk karakteri ekler.
   *padStart() string uzunluÄŸunu verilen uzunluÄŸa sabitler.BaÅŸa BoÅŸluk karakteri ekler.  
  */
 'Ja'.padEnd(10);
 'Ja'.padStart(10);

 /**repeat() string  ifadeyi verilen sayÄ±da tekrarlar. */
 'JS'.repeat(10);

 /**replace() string ifadeyi yeniden isimlendirir. */

 'JavaScript'.replace('Java','Ecma');

 /**search() string ifade iÃ§erisinde verilen string veya regxp arar. */

 'Javascript'.search('java');
 'Javascript'.search(/script/);

 /**slice()  slice dilim demektir.Bir string den bir dilim almamÄ±zÄ± saÄŸlar. */

 'Javascript'.slice(0,2);

 /**split() stringi verilen stringe gÃ¶re ayÄ±rmamÄ±zÄ± saÄŸlar. */
 'Javascript'.split('');
 'Javascript ve Ruby'.split('ve');

 /**startsWith() string ifadenin verilen string ile baÅŸlayÄ±p baÅŸlamadÄ±gÄ±nÄ± kontrol eder. true veya false dÃ¶ner. */

 'Javascript ve ruby'.startsWith('Javascript');

 /**substring(start index,end index) substring string ayÄ±rma iÅŸlemi yapmamÄ±zÄ± saÄŸlar baÅŸlangÄ±Ã§ ve bitiÅŸ indis deÄŸerlerini alÄ±r. */

 'Javascript'.substring(1,4);

 /**substr(start index,length) substr string ayÄ±rma iÅŸlemi yapmamÄ±zÄ± saÄŸlar baÅŸlangÄ±Ã§ ve baÅŸlangÄ±Ã§tan sonra kaÃ§ karakter alacaÄŸÄ±nÄ±n sayÄ±sÄ±nÄ± alÄ±r. */
 'Javascript'.substr(1,4);

 /** toUpperCase() string ifadeyi bÃ¼yÃ¼k harfe Ã§evirir.*/

 'Melike'.toUpperCase();

 /**toLowerCase() string ifadeyi kÃ¼Ã§Ã¼k harfe Ã§evirir. */
 'Melike'.toLowerCase();

 /** toLocaleUpperCase() string ifadeyi verilen dildeki bÃ¼yÃ¼k harfe Ã§evirir.*/

 'Melike'.toLocaleUpperCase('tr');

 /**toLocaleLowerCase() string ifadeyi verilen dildeki kÃ¼Ã§Ã¼k harfe Ã§evirir. */

 'Melike'.toLocaleLowerCase('tr');

/**toString() herÅŸeyi stringe Ã§evirmemizi saÄŸlar. */
(2333).toString();

/**trim() string iÃ§indeki boÅŸluklarÄ± temizlememizi saÄŸlar. */

'    Javascript   '.trim();

'    Javascript   '.trimLeft();//sadece soldaki boÅŸluklarÄ± temizler.

'    Javascript   '.trimRight();//sadece saÄŸdaki boÅŸluklarÄ± temizler.


/**Number Datatypes */

/**isFinite() verilen sayÄ±nÄ±n sonlu olup olmadÄ±gÄ±nÄ± dÃ¶ner .Sonlu ise true deÄŸilse false dÃ¶ner. */
Number.isFinite(10/0);

/** isInteger() sayÄ±nÄ±n tamsayÄ± olup olmadÄ±gÄ±nÄ± dÃ¶ner.true ya da false*/

Number.isInteger(1);

/**isNaN() NaN olup olmadÄ±ÄŸÄ±nÄ± dÃ¶ner. */
parseInt('sss');//NaN -not a number

Number.isNaN(parseInt('sss'));

/**parseFloat() verileni floata Ã§evirir. */
Number.parseFloat('1.2');

/**parseInt() verileni integere Ã§evirir. */

Number.parseInt('1.2');


/**toExponential()  bilimsel ÅŸekilde yazmamÄ±zÄ± saÄŸlar.*/
(2).toExponential();

/**toFixed() sayÄ±yÄ± sÄ±fÄ±rlÄ± formatta verir.2.00 gibi*/
(2).toFixed(2);


/**Array datatype */
var arrayExample = [1,2,3,4];
/**isArray() verilenin array type olup olmadÄ±gÄ±nÄ± dÃ¶ner. true ya da false */
Array.isArray(arrayExample);
/**concat() iki arrayÄ± birleÅŸtirmemizi saÄŸlar. */
arrayExample.concat([8,9]);

/**every() array iÃ§erisindeki tÃ¼m deÄŸerleri dÃ¶ner iÃ§erisinde fonksiyonlar yazÄ±labilir. */
//EÄŸer dizinin tÃ¼m elemanlarÄ± number ise true dÃ¶ner.
arrayExample.every(function(item){return typeof item == 'number';});

//false dÃ¶ner.
[1,2,'mel'].every(function(item){return typeof item == 'number';})

/**some() dizinin elemanlarÄ±ndan bazÄ±larÄ±nÄ±n Ã¶zellikleri varsa true dÃ¶ner. */
[1,2,'mel'].some(function(item){return typeof item == 'number';})

/**fill() array iÃ§erisindeki tÃ¼m elemanlarÄ± verilen ile doldurur. */

arrayExample.fill('mel');//tÃ¼m elemanlar mel olur.

Array(10);
Array(10).fill(1);//ÅŸeklinde kullanÄ±lÄ±r.

/**filter() filtrele.. */

arrayExample.filter(item =>{ item % 2 == 0});//Ã§ift sayÄ±larÄ± filtreler.


/**find() ilk buldugu deÄŸeri dÃ¶ner. */

arrayExample.find(item => item %2 == 0);

/**findIndex() find gibidir.Ama Ä±ndex deÄŸeri dÃ¶ner.EÄŸer bulamaz ise -1 dÃ¶ner.
 * +false ÅŸeklinde rakama Ã§evirebiliriz..rakam karÅŸÄ±lÄ±ÄŸÄ±na..
 */

 arrayExample.findIndex(item =>{ item % 2 == 0});


 /**foreach() diziyi dÃ¶nememizi saÄŸlar.Her biri iÃ§in dÃ¶ner. */
 
 arrayExample.forEach(item => {console.log(item);});

 /**includes() array iÃ§erisinde varmÄ± yokmu bakar.true ,false dÃ¶ner. */

 arrayExample.includes(4);

 /**indexOf() dizi iÃ§inde arar ,bulursa indexi dÃ¶ner .Yoksa -1 dÃ¶ner. */

 arrayExample.indexOf(8);

 /**join() bir araya getirir. 
  * Array tÃ¼m itemlarÄ±nÄ± verilen karakterle birleÅŸtirip string olarak geri dÃ¶ner.
 */

 arrayExample.join(',');

 /**map() array i deÄŸiÅŸtirmemizi saÄŸlar.
  * Arrayi komple yeni hale getirir.
 */

 arrayExample.map(item => item*2);

 arrayExample.map(item => item*item);

/**pop array sonundan bir eleman Ã§eker. Array i deÄŸiÅŸtirir. */

arrayExample.pop();

/**push() dizinin sonuna ekler.Nereye eklediÄŸinin indexini verir.
 * Arrayi deÄŸiÅŸtirir.
 */

arrayExample.push(45);

/**reverse() array ters Ã§evirir.
 * Arrayi deÄŸiÅŸtirir.
*/

arrayExample.reverse();


/**shift() dizinin baÅŸtan ilk elemanÄ±nÄ± alÄ±r. */

arrayExample.shift();

/**slice() dilim olarak alÄ±r. */

arrayExample.slice(0,2);

/**unshift() dizinin en baÅŸÄ±na eleman ekler. */

arrayExample.unshift(25);

/**sort() arrayi sÄ±ralar .Ä°Ã§erisine function verebiliriz. */

arrayExample.sort();

['mel','el','as','ÅŸer'].sort((a,b)=>{a.localeCompare(b,'tr');});

['mel','el','as','ÅŸer'].sort();

/**Object datatypes 
 * Object data type key ve value lardan oluÅŸan javascriptte Ã§okÃ§a kullanÄ±lan tiptir.
 * Ä°Ã§erisine fonksiyon ,nesne,dizi,deÄŸiÅŸken gibi bir Ã§ok bilgi alabilir.
 * JSON-Javascript Object Notation :Tamamen javascript iÃ§in Ã¶zelleÅŸtirilmiÅŸ ,nesne modelidir.
*/

var object = {
   name : 'Melike',
   surname: 'EryÄ±lmaz',
   age:23,
   func : function (){ return 1;},
   x : [1,2,3],
   z: {
      name:'mel',
      surname:'er'
   }
}

console.log(object.age); //Nesnelerin Ã¶zellikler ve fonksiyonlarÄ±na bu ÅŸekilde eriÅŸebiliriz.

Object.keys(object);//Nesnelerin keylerine bu ÅŸekilde eriÅŸebiliriz.

Object.values(object);//Nesnelerin value larÄ±na bu ÅŸekilde eriÅŸebiliriz.

console.log(object.func());




/**Javascript Functions
 * Belirli sÄ±rada Ã§alÄ±ÅŸan komutlarÄ± iÃ§eren tek bir komuta function denir.
 * DeÄŸerleri return eder.
 * 
*/
